
Spring 과 SpringBoot 에 대해 알아보자.

Spring과 SpringBoot 는 매우 유명한 자바 기반 웹 개발 프레임워크이다. 그렇지만 Spring 과 SpringBoot 가 비슷하다고 생각되는 부분도 많을 것이고 어떤 차이가 있는지 모호하게 알고 있는 부분들이 
많을 것으로 생각된다. 그러면 Spring 과 SpringBoot 는 무엇인지, 어떤 차이가 있는지 알아보도록 하자. 둘 간의 비교를 하기에 앞서 Spring 이라는 개념에 대해서도 간단히 정리해 보도록 하자.


Spring 은 정확히 말하면 Spring 프레임워크에 국한되는 개념은 아니고, Spring 프레임워크를 기반으로 만들어진 프로젝트 전체를 지칭한다. Spring 공식 홈페이지에 들어가 보면 Spring ... Spring ...
Spring ... Spring ...  등 많은 Spring 프로젝트가 있다. 이 프로젝트들의 근간이 되는 것이 Spring 프레임워크 이고, 많이들 알고 있는 SpringBoot 역시 Spring 프레임워크 기반의 프로젝트이다. 
그래서 보통 Spring 을 이야기 할 때 Spring 프레임워크를 지칭하는 경우가 많고, 이것이 잘못된 것은 아니다. 

그렇다면 Spring 프레임워크는 왜 만들어졌을까? 

Spring 은 다들 알고 있듯 봄이라는 뜻을 갖고 있다. 이는 Spring 이 처음 등장할 때, 개발 생태계의 겨울이 지나 봄이 왔다는 의미이다. 개발자들이 기존 웹 개발 과정에서와 같이 복잡한 설정과 
초기 세팅에 많은 시간을 투자하지 않고 비즈니스 로직에 집중할 수 있도록 하는 프레임워크의 등장이라는 부분에서 이런 이름을 붙였다고 한다.
그러나 Spring 역시 생태계의 확장과 수많은 오픈소스의 등장으로 점점 복잡해지고, Spring 을 사용하는 것 만으로도 설정에 많은 시간을 쏟게 되었다. 

개발자들이 이런 부분들로부터 자유로워지고 완전히 비즈니스 로직에만 집중할 수 있도록, Spring 프레임워크를 포함하여 자동으로 여러 설정들을 주입하고 관리해 주는 프레임워크가 바로 스프링부트라고 
할 수 있겠다. 즉, Spring 프레임워크를 훨씬 편하게 사용할 수 있는 업그레이드 Spring 이라고 생각 할 수 있다.
그러면 Spring 과 정확히 어떤 것들이 달라졌는가?
하면 대표적으로 의존성(dependency) 관리, 빈의 자동 등록, 설정 파일, 내장 서버, 등을 말할 수 있을 것 같다.


1. 의존성 관리
   Spring 을 사용하는 경우, 프로젝트를 개발하기 위해 많은 의존성을 추가해야 한다. SpringBoot도 의존성을 추가하는 건 마찬가지지만, 그 종류가 훨씬 적고 간단하다. SpringBoot 에서는 starter 
   라는 dependency 패키지를 제공하는데, 이 패키지 안에 해당 기능을 개발하는 데 필요한 많은 의존성들이 포함되어 있다. 예를 들어 'spring-boot-starter-web' 의존성은 웹 어플리케이션 개발에 
   필요한 의존성 패키지로, 내부적으로 SpringMVC, SpringWeb, Jackson, Embedded Tomcat 등 다양한 모듈을 포함하고 있다. SpringBoot 의 경우 또한 dependency-management 플러그인을 통해 
   의존성 간의 버전 관리도 자동으로 해 준다. 이로써 Spring 프레임워크보다 의존성 관리를 훨씬 간단하게 할 수 있다.

2. 빈 자동 등록
   Spring 은 빈을 등록할 때, @Configuration이 적용된 설정 파일에서 빈 등록을 직접 해야 한다. 그러나 SpringBoot 는 @AutoConfiguration 어노테이션과 같은 매커니즘을 통해 어플리케이션 실행에
   필요한 빈들이 자동으로 등록되고, 자주 사용되는 Component( Service, Repository 등과 같은) 클래스들이 자동으로 빈으로 등록되기에 개발자는 별다른 Configuration 클래스 없이 빈을 주입할 수 
   있다.

3. 설정 파일
   Spring 환경에서는 프로젝트 초기 설정을 위해 xml이나 JavaConfig 클래스를 작성해야 하지만, SpringBoot 에서는 properties 파일이나 yaml 파일을 사용하여 훨씬 가시적이고 쉬운 방법으로 
   프로젝트 설정을 변경할 수 있다.

4. 내장 서버
   Spring 을 사용하여 프로젝트를 배포하기 위해서는, 별도의 서버를 설치하고 해당 프로젝트를 war 포맷으로 빌드하여 WAS 를 실행해야 한다. SpringBoot 에서는 이 과정들이 생략되고, 내장 
   Tomcat이 라이브러리로 포함되어 있어 main 메서드 실행과 동시에 서버가 자동으로 실행된다. 내장 서버를 가지고 있기 때문에 jar 포맷으로 빌드하여도 웹 어플리케이션을 실행할 수 있다.




위와 같이 SpringBoot 를 사용하면 여러 불편함을 해소하고 개발자는 개발 로직에만 집중할 수 있으며, 개발 시간도 크게 단축된다.
그러나 SpringBoot 가 가져다 주는 편리함 이면엔 여러 단점들도 있다고 생각하는데, 대표적으로 나처럼 프로젝트 예제를 보면서 구현 중심으로 웹 개발을 먼저 공부한 사람들은 그 편리함에 안주해 
why? 를 하지 않게 되는 것을 예로 들 수 있을 것 같다. 간단한 설정만 마치고 바로 개발만 해도 어플리케이션이 돌아가는 것에 마음이 놓이고, 그 너머의 것들을 보려고 하지 않은 시간이 꽤 오래 
있었던 것 같다. 그래서 Spring 을 공부하는 사람이라면 누구나 이 주제를 한번쯤 깊게 생각해 보는 것이 좋겠다.

SpringBoot 를 사용하는 입장에서, 그리고 Spring 을 공부하는 입장에서 두 개념이 어떤 차이가 있는지, Spring 과 SpringBoot 가 어떤 배경으로 등장했는지 정도는 알고 있는 것이 좋다고 생각한다. 
누가 물어보면 자신있게 설명할 수 있을 정도로 두 개념의 차이를 잘 알지 못했기에, 이번 기회에 글로 정리해 보면서 Spring 과 SpringBoot 자체에 대해서도 더 깊게 공부가 된 것 같다. Spring 이 
무엇인가에 대한 보다 자세한 정리는 쉽게 매듭지어질 내용도 아니고 짧게 끝날 글도 아니라고 생각해 다른 글에서 더 깊게 다뤄보려고 한다. Spring 과 SpringBoot 에 대한 간단한 정리와 비교는 
여기서 마친다.




